<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" xml:space="preserve"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g style="display:inline">
    <g style="fill:#c8beb7">
      <path style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#c8beb7;fill-opacity:1;stroke:#000;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m255.307 371.808 110.45 32.117-20.889-64.8z"/>
      <path style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#c8beb7;fill-opacity:1;stroke:#000;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m309.126 369.36.305-62.166 23.575 1.472.217 68.8z"/>
    </g>
    <path style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#ac9d93;fill-opacity:1;stroke:#000;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m175.047 154.719 21.506-7.026 266.816 67.82-1.597 166.525-15.264 9.23-271.4-76.375z"/>
    <path style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:none;fill-opacity:1;stroke:#fff;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m175.828 156.602 273.22 69.669-2.27 161.867 2.115-161.323 12.12-8.782-12.021 8.713z"/>
    <path style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:teal;fill-opacity:1;stroke:#000;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m189.023 178.672 239.417 60.649-1.804 132.895-239.813-70.797z"/>
  </g>
  <g style="display:inline">
    <path style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:none;fill-opacity:1;stroke:#fff;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="M242.875 215.52c20.407 32.545 12.054 22.647 45.507 9.102M341.18 231.683c1.262 6.208 5.54 10.86 7.61 16.652.663 1.855.807 7.287 1.803 8.828 1.435 2.219 22.208-11.444 24.82-12.831M207.39 271.743c38.556 40.591 81.323 47.214 133.493 54.667 11.743 1.678 28.885 3.918 40.498-.024 5.024-1.705 10.7-3.64 15.145-7.176 2.978-2.37 17.449-20.673 14.671-24.87-.605-.915-2.097.644-3.135 1.001-8.767 3.014-16.5 6.46-25.214 8.96-25.444 7.297-55.971 6.845-81.665 1.834-24.664-4.81-57.563-23.089-76.854-38.975-4.76-3.92-18.662-19.344-22.857-20.968-.372-.144 2.605 7.042 4.08 11.465 1.766 5.299 3.287 11.167 4.43 16.421"/>
    <path style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:none;fill-opacity:1;stroke:#fff;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="M229.472 274.225c-2.855 1.066-4.415 2.717-5.923 4.724M248.634 285.752c-1.79 1.408-3.08 3.15-4.696 4.766M262.607 292.346c.024 3.255-1.422 5.738-3.209 7.94M280.233 300.744c.526 1.96.389 3.967.389 5.965M298.603 308.123c.597.895 1.073 3.501 1.171 4.163M325.531 311.084c.323 1.53 1.616 3.131 2.127 4.024M345.024 311.11c.51 2.272.75 3.834 1.738 5.794M362.47 309.83c.02 1.92 1.953 3.456 2.474 4.181M381.867 306.763c.562 2.156 2.088 3.483 3.225 5.237M376.344 325.8c.05-1.946-1.531-4.004-2.206-5.205M355.477 324.306v-2.775M335.574 321.198v-2.596M309.063 319.067c1.03-2.438 1.505-1.683 2.606-2.915M288.521 315.076c.595-1.59 1.045-3.241 1.794-4.764M265.925 306.728c2.698-.678 3.09-3.095 3.833-4.432M246.732 300.06c1.981-1.342 3.453-2.537 4.773-4.243M231.505 289.497c1.09-1.01 3.226-2.174 4.143-2.655M212.648 275.476c1.92-3.156 3.216-3.894 6.353-4.587"/>
  </g>
</svg>