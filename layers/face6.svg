<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" xml:space="preserve"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g style="display:inline">
    <path style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#ac9d93;fill-opacity:1;stroke:#000;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m225.633 382.219.036-18.35 148.07 39.618-.71 22.64z"/>
    <path style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#ac9d93;fill-opacity:1;stroke:#000;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m371.356 402.503 94.454-51.87 3.095 33.49-94.78 48.596z"/>
    <path style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#c8beb7;fill-opacity:1;stroke:#000;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m465.056 351.478-35.878-12.462-176.042 12.968-26.074 13.434 145.098 36.274z"/>
    <path style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#ac9d93;fill-opacity:1;stroke:#000;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m176.341 328.578 190.892 56.357 47.136-37.13 1.27-160.556-188.552-47.77-50.478 16.412z"/>
    <path style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:teal;fill-opacity:1;stroke:#000;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m205.367 193.364.989 115.608 132.772 41.82-1.677-126.759z"/>
    <path style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#c8beb7;fill-opacity:1;stroke:#000;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m414.827 333.807 61.216-48.391-3.084-117.044-159.294-39.61-53.405 19.315 155.095 37.785z"/>
    <path style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#ac9d93;fill-opacity:1;stroke:#fff;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="m184.992 157.047 178.364 46.037 51.26-14.934-51.64 15.156 3.26 178.892-3.187-177.906zM417.457 196.781c2.757 0 51.635-25.342 51.635-25.342z"/>
  </g>
  <g style="display:inline">
    <path style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:none;fill-opacity:1;stroke:#fff;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="M229.596 227.122c5.772 24.504 19.252 13.856 35.061 7.404M283.18 236.344c12.525 11.36-.615 26.817 17.85 13.056 4.807-3.583 6.105-7.64 11.72-10.405M222.969 269.594c2.373 11.97 5.656 22.016 13.325 31.774 11.02 14.02 45.894 18.397 60.053 9.881 15.699-9.442 13.01-25.07 20.036-32.09.85-.85-1.45 2.125-2.59 2.503-3.862 1.28-6.824 3.418-9.275 7.084-5.823 8.708-20.98 13.772-31.454 12.027-14.565-2.428-28.28-7.61-37.12-20.056-2.825-3.978-4.472-9.002-7.948-12.445-.768-.762-3.87-3.145-3.87-4.673 0-2.835-1.152 6.005.187 8.504"/>
    <path style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:none;fill-opacity:1;stroke:#fff;stroke-width:7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000;stop-opacity:1" d="M246.245 293.974a30.079 30.079 0 0 1-1.766 4.423M257.786 299.839c.09 1.013-.38 2.287-.652 2.93M269.733 302.327c.187 1.215.268 3.127.408 4.068M281.689 301.914c.4 1.254 1.058 2.785 1.53 3.755M247.147 307.181c.802-1.106 1.815-1.911 2.888-2.554M260.33 310.7c.247-.976-.234-1.892-.5-2.752M283.393 314.117c-.214-1.313-.221-2.624-.221-3.992M300.873 309.23c-1.392-1.614-3.201-2.84-4.58-4.312M239.96 289.183c-1.798-.018-2.9.726-4.01 1.27"/>
  </g>
</svg>